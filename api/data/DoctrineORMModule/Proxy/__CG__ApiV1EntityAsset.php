<?php

namespace DoctrineORMModule\Proxy\__CG__\Api\V1\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Asset extends \Api\V1\Entity\Asset implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getFilename()
    {
        $this->__load();
        return parent::getFilename();
    }

    public function setFilename($filename)
    {
        $this->__load();
        return parent::setFilename($filename);
    }

    public function getFileSize()
    {
        $this->__load();
        return parent::getFileSize();
    }

    public function setFileSize($filesize)
    {
        $this->__load();
        return parent::setFileSize($filesize);
    }

    public function getMediaType()
    {
        $this->__load();
        return parent::getMediaType();
    }

    public function setMediaType($mediaType)
    {
        $this->__load();
        return parent::setMediaType($mediaType);
    }

    public function getProcessed()
    {
        $this->__load();
        return parent::getProcessed();
    }

    public function setProcessed($processed)
    {
        $this->__load();
        return parent::setProcessed($processed);
    }

    public function getLat()
    {
        $this->__load();
        return parent::getLat();
    }

    public function setLat($lat)
    {
        $this->__load();
        return parent::setLat($lat);
    }

    public function getLng()
    {
        $this->__load();
        return parent::getLng();
    }

    public function setLng($lng)
    {
        $this->__load();
        return parent::setLng($lng);
    }

    public function getMeta()
    {
        $this->__load();
        return parent::getMeta();
    }

    public function setMeta($meta)
    {
        $this->__load();
        return parent::setMeta($meta);
    }

    public function getFlags()
    {
        $this->__load();
        return parent::getFlags();
    }

    public function setFlags($flags)
    {
        $this->__load();
        return parent::setFlags($flags);
    }

    public function getAttempted()
    {
        $this->__load();
        return parent::getAttempted();
    }

    public function increaseAttempted()
    {
        $this->__load();
        return parent::increaseAttempted();
    }

    public function getLog()
    {
        $this->__load();
        return parent::getLog();
    }

    public function addLog($message)
    {
        $this->__load();
        return parent::addLog($message);
    }

    public function getEvent()
    {
        $this->__load();
        return parent::getEvent();
    }

    public function setEvent(\Api\V1\Entity\Event $event = NULL)
    {
        $this->__load();
        return parent::setEvent($event);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setUser(\Api\V1\Entity\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getResourceId()
    {
        $this->__load();
        return parent::getResourceId();
    }

    public function reverseWithHeight()
    {
        $this->__load();
        return parent::reverseWithHeight();
    }

    public function getWidth()
    {
        $this->__load();
        return parent::getWidth();
    }

    public function setWidth($width)
    {
        $this->__load();
        return parent::setWidth($width);
    }

    public function getHeight()
    {
        $this->__load();
        return parent::getHeight();
    }

    public function setHeight($height)
    {
        $this->__load();
        return parent::setHeight($height);
    }

    public function isDeleted()
    {
        $this->__load();
        return parent::isDeleted();
    }

    public function setDeleted($deleted)
    {
        $this->__load();
        return parent::setDeleted($deleted);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function getModified()
    {
        $this->__load();
        return parent::getModified();
    }

    public function setModified($modified)
    {
        $this->__load();
        return parent::setModified($modified);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'filename', 'filesize', 'mediaType', 'processed', 'lat', 'lng', 'width', 'height', 'meta', 'flags', 'attempted', 'log', 'deleted', 'created', 'modified', 'event', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}